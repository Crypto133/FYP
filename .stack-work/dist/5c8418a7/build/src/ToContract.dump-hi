
==================== FINAL INTERFACE ====================
2019-04-04 10:40:12.5052627 UTC

interface FYP-0.1.0.0-DB97z4OHGdmISridARSpDG:ToContract 8022
  interface hash: 8ceadc27af649b030c9f78bc26f6a5e2
  ABI hash: d0e999aa97ba452fb5c2dec3b425232a
  export-list hash: bb08da3308aec040f66956574d551df6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 116d747c6d2286eaf4ade378327fec2c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ToContract.checkAddTo
  ToContract.checkAddToHelper
  ToContract.checkCommitEther
  ToContract.checkConstuctor
  ToContract.checkPartialRest
  ToContract.checkSend
  ToContract.checkWithdraw
  ToContract.getString
  ToContract.isAddTo
  ToContract.isCommitEther
  ToContract.isConstructor
  ToContract.isPartial
  ToContract.isRest
  ToContract.isSend
  ToContract.isSet
  ToContract.isWithdraw
  ToContract.patialError
  ToContract.readDataTypes
  ToContract.readDouble
  ToContract.readInt
  ToContract.readMoney
module dependencies: Auction Bank Contract ContractClass Lottery
                     Simulate ToSolidity
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  Contract 825040171bf0f5fba9e4be553cd25cfc
  exports: 18280b7c07d72ea56b802b842c8c508a
  AddTo f8a6eb9a21f4ff519be304dfb9e616ed
  Address 274cce099d647331940d67e560707969
  All 7ed62f24e01111c319fcab1b5619f4c7
  AlreadyFinished f1e60aced5724c11770392685320875d
  AlreadyJoined aeedf90b74334a296594eef2c59c7f5b
  Amount 341537ce0e00a778849a9c7693f44f64
  AmountIn 42b4879f0298b537d382f2840bdd4917
  Beneficiary eb11561124df885f4b3461cdb529790f
  CommitEther 0d03bba4243efc9d4d9f7455424356ba
  Constructor a194b2183d57d3e500d8bc5b6ffdb82f
  Contract 287e4fefef54359a2ef6640bd806c459
  ContractOwner 4cc38e0c26ad3eff8ac162cc56cf12ea
  End 0719f5aa24d0869f683a0681870a0300
  Equal b97b2f5d6d2244eeef6c14a019ad4be1
  Error 62f034ad40e7c557f73de45d8c867cd2
  Ether 0b21adb2a89b504e89e7a017ffaa2bf4
  From e4e07f0c078e5eeabd4f8d478315871d
  Function d013115f82f58820e9684353a130163f
  HigherThan d8b884c742acc3f50a2190305d6c17f4
  IsNot ec1f7280f9d2f9cb83ca6207bf925d5b
  Max 5ba1e7c072cdead3f63ecbb4e2ff59d6
  Min 5c8a02d84ec93844fd58f78cc2be20b2
  NoLimit 12be2f3887c1a4bc4e620de686b37f4f
  Partial e2ab183c66ceac33454ad415753eac7a
  People 58fa935abece96f6a2aeac16f6845fe2
  Random 9d823bffe8ffeab5658ef82f7465f55a
  Rest 6c18654e3cec54a993986507415b0049
  Send 5c21d0d64f6594af25a398081624747c
  Set 517a19c5752254154d838f984f7e575c
  TimeLimit 026d60b25bf41af7b4a95e86076d6c0f
  TimesUp 599c001e496166b967040765c4c7fc8f
  ToBeneficiary 04143c1d13559f0ebba25b6b1d0b087f
  ToOwner 6311757d6519f2898a047f11d3f937d5
  TotalAmount b86eb609ab784c4d51bd731741f18eb3
  TotalReached 6b8ef10f5ac1fcaae270c76f7b82c226
  Unless 416f1226644b4b57a375517a044c6355
  Until 20a91bca68b0897f6bcf9ca312769a25
  When fa475a06038622bbaa39698ae3663c79
  Winner 02c1e25e37e3f641368a838ec33573b7
  Withdraw 84bb4f90eebe36456f1bed17322c50a5
import  -/  ContractClass 05cba93360fc1b4e99f4dda6413fd294
  exports: f8618b225029ed238f0e2e77b83b442c
import  -/  Simulate 3b6fcf0ac75ef8c6d0723b537c0d8f1e
  exports: f14883f128629940d4c0dac6b54bc48e
import  -/  ToSolidity dd2136a8b752811c29ba490670ae19ee
  exports: b2eaa5f39f173037512a6052a8a536c5
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:Text.Read c150617dda21a009ed26981626bd21d7
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
fcbd710aa25f067fbce1838ce24a04be
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ToContract.$trModule3
                   ToContract.$trModule1) -}
04fd0171fa80f623dead0c48a765d42d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ToContract.$trModule2) -}
19a7c6ce81a54ec78d169e5363d96957
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToContract"#) -}
ecbdbb234f6ae191294cee37188d87c8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ToContract.$trModule4) -}
6f2d5f0a19792b5b3ecd8f3cc7ba9896
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("FYP-0.1.0.0-DB97z4OHGdmISridARSpDG"#) -}
f9f603c83b4fc7660f3cf074e2fd5358
  checkAddTo :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
7af2a96d0a94f21839ca3cd4c62bf0f2
  checkAddToHelper :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
238d426d2df26c652a84af7b48597772
  checkCommitEther :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> ToContract.checkCommitEther1
                   : x xs
                   -> case ToContract.isCommitEther wild of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case ToContract.isWithdraw wild of wild2 {
                             GHC.Types.False -> ToContract.isSend wild
                             GHC.Types.True -> GHC.Types.True } } }) -}
e7dc922e97790060a22eb61560aaf247
  checkCommitEther1 :: GHC.Types.Bool
  {- Strictness: x -}
3e98a14e1d3eb20ea4407169af6827cc
  checkConstuctor :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
cea5955908d6aaa9a22cac4f3080ab45
  checkPartialRest :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> ToContract.checkPartialRest1
                   : x xs
                   -> case ToContract.isPartial wild of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> ToContract.isRest wild } }) -}
18e4d3213e479755969da7aa3e837ad8
  checkPartialRest1 :: GHC.Types.Bool
  {- Strictness: x -}
f3fac9941e4edf7e25213f50b5c088d6
  checkSend :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> ToContract.checkSend1
                   : x xs
                   -> case ToContract.isSend wild of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> ToContract.isCommitEther wild } }) -}
54add1fe8c3d8138d105f718684627f9
  checkSend1 :: GHC.Types.Bool
  {- Strictness: x -}
5567aac9a4468ceaa638bc47808c8de0
  checkWithdraw :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> ToContract.checkWithdraw1
                   : x xs
                   -> case ToContract.isWithdraw wild of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case ToContract.isAddTo wild of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> ToContract.isCommitEther wild } } }) -}
a79ef7138ce195d9354a12ea5fa963f0
  checkWithdraw1 :: GHC.Types.Bool
  {- Strictness: x -}
42c3c55f8561adfa51a9269412cc98ce
  getString :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild { [] -> ToContract.getString1 : x xs -> x }) -}
e3ab944105da64db1adb66bd778438a0
  getString1 :: GHC.Base.String
  {- Strictness: x -}
a3095ecce798ff199d3c576851c7f02e
  isAddTo :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
41097f6b0c118fcb614d4778d30dc6f4
  isCommitEther :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
0241ec2f79177e5eb50e9bc6a7e79d4e
  isConstructor :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
9e4601455a520d973d2725cfd1f8e679
  isPartial :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
d74b7a63455f58bffb70bf7eea6c5f6e
  isRest :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
5e9a9299514ecf4dd82859f627efe472
  isSend :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
a03426cba7bcdfcb247d9ffc7474dc96
  isSet :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
15b963ba01b09cae8e096ec7bde429d0
  isWithdraw :: [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
8064b483b026f65f7ead7b7bd7414ca2
  patialError :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ToContract.patialError1) -}
75798f76f163ddd58cdfd366b7c84c43
  patialError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ToContract.patialError2) -}
feceab3261052086827eb0d8462b12cd
  patialError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Number must be 0 < x > 1 for Partial"#) -}
2d2e6bbfe6e9c1b2200fef119e4ead42
  readDataTypes :: [GHC.Base.String] -> Contract.Contract
  {- Arity: 1, Strictness: <S,1*U> -}
fa951e9c968416a34aedc52400cc7522
  readDouble :: [GHC.Base.String] -> GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> ToContract.readDouble4
                   : x xs
                   -> case Text.Read.readEither8
                             @ GHC.Types.Double
                             (Text.ParserCombinators.ReadP.run
                                @ GHC.Types.Double
                                ToContract.readDouble3
                                x) of wild1 {
                        [] -> ToContract.readDouble2
                        : x1 ds1
                        -> case ds1 of wild2 {
                             [] -> x1 : ipv ipv1 -> ToContract.readDouble1 } } }) -}
cf91e9332306f6ed7496fc5912132429
  readDouble1 :: Contract.Ether
  {- Strictness: x -}
b92f792e446e37a907df7e2578cc871c
  readDouble2 :: Contract.Ether
  {- Strictness: x -}
74152491619b9bf7e28e300a7618ae0f
  readDouble3 :: Text.ParserCombinators.ReadP.P Contract.Ether
  {- Unfolding: (GHC.Read.$fReadDouble_$sreadNumber
                   GHC.Read.$fReadDouble_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ Contract.Ether
                   (Text.Read.readEither7 @ Contract.Ether)) -}
b01d85a087d2f1d0fdeb43b279d763df
  readDouble4 :: GHC.Types.Double
  {- Strictness: x -}
1b44bf25570bab2021114b14110624ae
  readInt :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           ToContract.readInt3
                           s) of wild {
                   [] -> ToContract.readInt2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> ToContract.readInt1 } }) -}
645f3655cfec0579e12a936a0def6579
  readInt1 :: GHC.Types.Int
  {- Strictness: x -}
b0161d2e256e0d21be41f14ccf03f361
  readInt2 :: GHC.Types.Int
  {- Strictness: x -}
adf114ead5cf9ead0028516772ef9124
  readInt3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
ee930224eee61cd4928e511146274d30
  readMoney :: GHC.Base.String -> Contract.Ether
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ Contract.Ether
                        (Text.ParserCombinators.ReadP.run
                           @ Contract.Ether
                           ToContract.readDouble3
                           s) of wild {
                   [] -> ToContract.readDouble2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> ToContract.readDouble1 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

