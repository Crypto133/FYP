
==================== FINAL INTERFACE ====================
2019-04-02 22:44:40.5913598 UTC

interface FYP-0.1.0.0-DB97z4OHGdmISridARSpDG:Simulate 8022
  interface hash: ba43b33b6f3b9f51aab3f81f29921d4c
  ABI hash: abf60e6668a276b72fa385bd0e96def5
  export-list hash: f14883f128629940d4c0dac6b54bc48e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 116d747c6d2286eaf4ade378327fec2c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Simulate.contractMember
  Simulate.getCommitAction
  Simulate.getCommitActionHelper
  Simulate.getCommitOutput
  Simulate.getSendOutput
  Simulate.getWithdrawAction
  Simulate.getWithdrawActionHelper
  Simulate.loop
  Simulate.niceOutput
  Simulate.prettyPrint
  Simulate.simulate
module dependencies: Contract ContractClass
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  Contract 3adff78d8d624d3cc0276069af32a818
  exports: 6627bdebaae646ad278a48bf11de3eed
  Action 573acde020f1111cee41e244e1529314
  AddTo 16a4ab257d0ac0e23a16dc86c22a0ef6
  All 7ed62f24e01111c319fcab1b5619f4c7
  AlreadyJoined aeedf90b74334a296594eef2c59c7f5b
  Amount 341537ce0e00a778849a9c7693f44f64
  AmountIn 42b4879f0298b537d382f2840bdd4917
  Beneficiary eb11561124df885f4b3461cdb529790f
  CashInp 0bbd77e8f29361b92b3908de7f1d4f09
  CommitEther 5b77c1558142d855f930d294dab693e9
  Constructor 99fe41f1b0fc9b6aa31d1cbb0e06ed90
  Contract 6a273a1536fb3d1fc790e24ac714826d
  ContractOwner 4cc38e0c26ad3eff8ac162cc56cf12ea
  ContractState d993594dcad27f3fe0cb1d7871ebbe0e
  Decision 996599e3d4623ced631d6754e8ded36c
  Empty 2a4ca97bf158ec44c34386498fc8b3f4
  End fb5e134afd8a0aae3eed01476f1becc6
  Equal 95e0a0066af32998c0cf43396d04c5f7
  Ether 0b21adb2a89b504e89e7a017ffaa2bf4
  Function 4e599cfb54a2849bddf328a3f736995e
  Higher 0f671eff55f2b25e820c5d4c414d96e6
  Max c603297e7bdc865c0c8c6676020f4b66
  Min ea48a0d8d0dee2400a7ff82ae76c9809
  NoLimit 8d8c332b294747195083f67458a45487
  OP 19caed1a49e6925229036d4da0f1ef3d
  Output fa247b76781f0c901173b12215a6771f
  ParamState 5038f5929ca2fe72716b18a20a8dd14a
  People 58fa935abece96f6a2aeac16f6845fe2
  Random 9d823bffe8ffeab5658ef82f7465f55a
  Send 28d2aafad88ccc1671895cb86529485e
  Set c1f42170922b3443ea424b5783f82bca
  SetBeneficary cdbeb3f905e56f1e50ba8a83997343ca
  SetOwner 9a9bc3449aa41aef9f5b3df0faa9c533
  ToBeneficiary 04143c1d13559f0ebba25b6b1d0b087f
  Unless c573235331b9383f2ce8592f28846d00
  Until e79ecca91a56d0fec1147be4486db3c3
  When 790e695a1022b48ea3a3e121921a3368
  Winner 02c1e25e37e3f641368a838ec33573b7
  Withdraw 4f78ed566180045f6ae2f547ed29a830
  WithdrawEther 3dba3e0dbe9948feac071c43053d2476
  commits d993594dcad27f3fe0cb1d7871ebbe0e
  emptyCState e3e5ece2677bed7ac50c1cb811870ecf
  emptyPState 0a16d5a2688e85c31df1e5fc074d30ba
  etherBalance d993594dcad27f3fe0cb1d7871ebbe0e
  findAtIndex d2b58392d2c862e22f194bb862693132
  getOneAddress 6200b2f415afbbab0c7798468cab7df5
  owner d993594dcad27f3fe0cb1d7871ebbe0e
  run 5eb32a0026b1bb77bdb7b0cb3b362bf8
  sizeCommits 4689edf0ad39b85249c536c7145fc54d
  withdrawSize 0d9846020151632be4a9719a4e7d7e50
  withdrawls d993594dcad27f3fe0cb1d7871ebbe0e
import  -/  ContractClass c019de4150eee4fa1bd790841434c04b
  exports: f8618b225029ed238f0e2e77b83b442c
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  base-4.10.1.0:Text.Read c150617dda21a009ed26981626bd21d7
import  -/  containers-0.5.10.2:Data.Map 2fb7598042a709bea8ff3ef551374c87
import  -/  containers-0.5.10.2:Data.Map.Internal 765cdf2fdf1dcff75ecb49b5edcb6b02
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
10c75022bb2c848455f8192cc416c03a
  $sfind1 ::
    GHC.Types.Int -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Internal.Map GHC.Types.Int a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Simulate.$wpoly_go13 @ a ww1 w1 }) -}
c91da77c2c0c8810db443ecbd2b15e99
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Simulate.$trModule3
                   Simulate.$trModule1) -}
6a646a5e92ad5b4212e60039be4572cd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Simulate.$trModule2) -}
6e23c2432c252bc2b45d315f48442c6f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Simulate"#) -}
e7d1e1829fde28cad4ea9bd2f9d8311a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Simulate.$trModule4) -}
14ec61a3c49235afddced669e39ed7ef
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("FYP-0.1.0.0-DB97z4OHGdmISridARSpDG"#) -}
50612d02402d684e4e69d65111b6d42b
  $wcontractMember ::
    GHC.Prim.Int#
    -> Contract.Contract
    -> Contract.ParamState
    -> Data.Map.Internal.Map GHC.Types.Int Contract.Action
    -> Data.Map.Internal.Map GHC.Types.Int Contract.Action
    -> Contract.Ether
    -> Contract.Address
    -> Contract.Address
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <S,U><L,U><L,U(U(U),U(U),U(U))><S,U><L,U><L,U(U)><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Contract.Contract)
                   (w1 :: Contract.ParamState)
                   (ww1 :: Data.Map.Internal.Map GHC.Types.Int Contract.Action)
                   (ww2 :: Data.Map.Internal.Map GHC.Types.Int Contract.Action)
                   (ww3 :: Contract.Ether)
                   (ww4 :: Contract.Address)
                   (ww5 :: Contract.Address)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Simulate.$wpoly_go1 @ Contract.Action ww ww1 of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Simulate.contractMember6
                             GHC.Types.True
                             w2 of ds1 { (#,#) ipv ipv1 ->
                      Simulate.contractMember5
                        w
                        w1
                        (Contract.ContractState ww1 ww2 ww3 ww4 ww5)
                        ipv }
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Simulate.contractMember4
                           (case Contract.$wfindAtIndex
                                   (GHC.Types.:
                                      @ GHC.Types.Int
                                      (GHC.Types.I# ww)
                                      (GHC.Types.[] @ GHC.Types.Int))
                                   (Contract.ContractState
                                      ww1
                                      ww2
                                      ww3
                                      ww4
                                      ww5) of ww6 { (#,#) ww7 ww8 ->
                            case ww7 of wild1 {
                              Contract.Commit p m
                              -> case ww8 of wild2 {
                                   [] -> GHC.Base.++ @ GHC.Types.Char p Simulate.contractMember2
                                   : ipv ipv1 -> Contract.getOneAddress1 }
                              Contract.SendOut ipv ipv1 -> Contract.getOneAddress1 } }))
                        GHC.Types.True
                        w2 }) -}
2a2883997db3d3d5e0c0dd91e9115d0a
  $wgetCommitActionHelper ::
    GHC.Prim.Int# -> Contract.ContractState -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,U(U,A,A,A,A)>, Inline: [0] -}
5e0b8c36d0eb6dabbb386fd3b3e246cc
  $wgetWithdrawActionHelper ::
    GHC.Prim.Int# -> Contract.ContractState -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,U(A,U,A,A,A)>, Inline: [0] -}
4d7703042440494dbbf85e5dd34382a5
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
41644d33958a7b1b308b4dbf4bdc46da
  $wpoly_go13 ::
    GHC.Prim.Int# -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
97db47c9d2cac17d0a679248e801c9fe
  contractMember ::
    GHC.Types.Int
    -> Contract.Contract
    -> Contract.ParamState
    -> Contract.ContractState
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><L,U><L,U(U(U),U(U),U(U))><S(SLLLL),1*U(U,U,U(U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Simulate.contractMember1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Contract.Contract>_R
                 ->_R <Contract.ParamState>_R
                 ->_R <Contract.ContractState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f8aaae7622e89e18cd92c754c9af8aa9
  contractMember1 ::
    GHC.Types.Int
    -> Contract.Contract
    -> Contract.ParamState
    -> Contract.ContractState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><L,U><L,U(U(U),U(U),U(U))><S(SLLLL),1*U(U,U,U(U),U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Contract.Contract)
                   (w2 :: Contract.ParamState)
                   (w3 :: Contract.ContractState)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Contract.ContractState ww3 ww4 ww5 ww6 ww7 ->
                 Simulate.$wcontractMember ww1 w1 w2 ww3 ww4 ww5 ww6 ww7 w4 } }) -}
c4a0177e1a00db00d7384913ea72b18e
  contractMember2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Simulate.contractMember3) -}
887a52b534b2f4f89c2d86f78d3a6c28
  contractMember3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" chosen"#) -}
a31d71a36949ad58e3861888a5769b87
  contractMember4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Wallet "#) -}
87c28e6ffe16fadb653371d029804b4d
  contractMember5 ::
    Contract.Contract
    -> Contract.ParamState
    -> Contract.ContractState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U),U(U))><L,U(U,U,U(U),U,U)><S,U> -}
53ed0321ef2ff0002f3e6ccf15970a3d
  contractMember6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Simulate.contractMember7) -}
f5d1f48048d5c22915a765d87e633088
  contractMember7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Wallet not a member of Contract"#) -}
89a1bf370d7d77a32aff7b49b73cad58
  getCommitAction ::
    GHC.Types.Int
    -> Contract.ContractState -> (GHC.Types.Int, Contract.Action)
  {- Arity: 2, Strictness: <L,U(U)><L,1*U(1*U,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Int) (const :: Contract.ContractState) ->
                 (n,
                  case const of wild { Contract.ContractState ds1 ds2 ds3 ds4 ds5 ->
                  Simulate.$sfind1 @ Contract.Action n ds1 })) -}
c452a597ecf333c07dad13e559388855
  getCommitActionHelper ::
    GHC.Types.Int -> Contract.ContractState -> GHC.Base.String
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,U(U,A,A,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Contract.ContractState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Simulate.$wgetCommitActionHelper ww1 w1 }) -}
ea19403b33273faa62862d66cdc21c6a
  getCommitOutput :: Contract.ContractState -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLLLL),1*U(U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (const :: Contract.ContractState) ->
                 case const of wild { Contract.ContractState ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   Data.Map.Internal.Bin dt ds5 ds6 ds7 ds8
                   -> Simulate.getCommitActionHelper (GHC.Types.I# dt) wild
                   Data.Map.Internal.Tip
                   -> Simulate.getCommitActionHelper
                        Contract.$fShowAction4
                        wild } }) -}
4fbe9f51ebfb0c252826118d41257033
  getSendOutput :: Contract.ContractState -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LSLLL),1*U(A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (const :: Contract.ContractState) ->
                 case const of wild { Contract.ContractState ds ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 {
                   Data.Map.Internal.Bin dt ds5 ds6 ds7 ds8
                   -> Simulate.getWithdrawActionHelper (GHC.Types.I# dt) wild
                   Data.Map.Internal.Tip
                   -> Simulate.getWithdrawActionHelper
                        Contract.$fShowAction4
                        wild } }) -}
09aa7311fb7e10d41510fcf0edc70ef1
  getWithdrawAction ::
    GHC.Types.Int
    -> Contract.ContractState -> (GHC.Types.Int, Contract.Action)
  {- Arity: 2, Strictness: <L,U(U)><L,1*U(A,1*U,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Int) (const :: Contract.ContractState) ->
                 (n,
                  case const of wild { Contract.ContractState ds1 ds2 ds3 ds4 ds5 ->
                  Simulate.$sfind1 @ Contract.Action n ds2 })) -}
309a42cda51dde73e1fb8b5cba89dfd5
  getWithdrawActionHelper ::
    GHC.Types.Int -> Contract.ContractState -> GHC.Base.String
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,U(A,U,A,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Contract.ContractState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Simulate.$wgetWithdrawActionHelper ww1 w1 }) -}
f97a01e6a0ecbb18eff8b03ee5558baf
  loop ::
    Contract.Contract
    -> Contract.ParamState -> Contract.ContractState -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U),U(U))><L,U(U,U,U(U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Simulate.contractMember5
                  `cast`
                (<Contract.Contract>_R
                 ->_R <Contract.ParamState>_R
                 ->_R <Contract.ContractState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
15411b52e0268b9da3af5c85450a834f
  niceOutput :: Contract.OP -> Contract.Output
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Contract.Output]) ->
                 case ds of wild {
                   []
                   -> Control.Exception.Base.patError
                        @ 'GHC.Types.LiftedRep
                        @ Contract.Output
                        Simulate.niceOutput1
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Control.Exception.Base.patError
                             @ 'GHC.Types.LiftedRep
                             @ Contract.Output
                             Simulate.niceOutput1 } }) -}
4183c77d0da5c6d0af2980f96631800b
  niceOutput1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("src\\Simulate.hs:220:1-18|function niceOutput"#) -}
a14492285f4ba0897acc3a0573bcb21f
  prettyPrint ::
    Contract.OP -> Contract.ContractState -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,U(U,U,1*U(U),1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Simulate.prettyPrint1
                  `cast`
                (<Contract.OP>_R
                 ->_R <Contract.ContractState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a8b4b29afce50fe7e52301059d4ce323
  prettyPrint1 ::
    Contract.OP
    -> Contract.ContractState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><L,U(U,U,1*U(U),1*U,A)><S,U> -}
74d2fa1a1f7d9dcacbb3fd808b117939
  simulate :: Contract.Contract -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Simulate.simulate1
                  `cast`
                (<Contract.Contract>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0ff5c98e2f7ede3dad23cb3145f03ad6
  simulate1 ::
    Contract.Contract
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Contract.Contract)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Simulate.simulate2
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 Simulate.contractMember5
                   c
                   Contract.emptyPState
                   Contract.emptyCState
                   ipv }) -}
a16854199dbd56961241218cef807bec
  simulate2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Simulate.simulate3) -}
6c5f28f1d31a75061cc23e2488c77e3b
  simulate3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Press any key to step through contract"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

