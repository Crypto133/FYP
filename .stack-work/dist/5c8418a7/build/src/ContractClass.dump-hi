
==================== FINAL INTERFACE ====================
2019-03-31 18:44:50.7907755 UTC

interface FYP-0.1.0.0-DB97z4OHGdmISridARSpDG:ContractClass 8022
  interface hash: 1542125c87ee09f5607ea8f0171ac053
  ABI hash: c019de4150eee4fa1bd790841434c04b
  export-list hash: f8618b225029ed238f0e2e77b83b442c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 116d747c6d2286eaf4ade378327fec2c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ContractClass.addTo
  ContractClass.allow
  ContractClass.and
  ContractClass.cashBackAll
  ContractClass.commitEther
  ContractClass.constructor
  ContractClass.end
  ContractClass.from
  ContractClass.function
  ContractClass.isnot
  ContractClass.or
  ContractClass.send
  ContractClass.set
  ContractClass.unless
  ContractClass.until
  ContractClass.when
  ContractClass.withdraw
module dependencies: Contract
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  Contract 6a6dd0dbefeb36c6654d5815abf98c95
  exports: b6b4648aa44fcd1a15c39c94f9c09bc7
  AddTo 16a4ab257d0ac0e23a16dc86c22a0ef6
  Allow 8df762a3b86b8d5ae8193f2f50e6d0a9
  Amount 341537ce0e00a778849a9c7693f44f64
  And 3abc548294187d23d0043131e06bdf0b
  Beneficiary eb11561124df885f4b3461cdb529790f
  CashBackAll 0174c4885b0dc58240e31287698f969b
  CheckState 64f0a15067a74817abca84a21b5412ad
  CommitEther 5b77c1558142d855f930d294dab693e9
  Constructor 99fe41f1b0fc9b6aa31d1cbb0e06ed90
  Contract 6a273a1536fb3d1fc790e24ac714826d
  ContractOwner 4cc38e0c26ad3eff8ac162cc56cf12ea
  End fb5e134afd8a0aae3eed01476f1becc6
  Error 1257c0ab9194e583a7cf3e0c28a925b4
  From 58b042125e3e48e8481018dc3bef4902
  Function 4e599cfb54a2849bddf328a3f736995e
  InputCondition aada6366b2c524a2787888a895e6ee1a
  IsNot c4b347568fe64bac16259fe0d2d2a87c
  Modifier 571750549f645a1584f0a6d855eab0b9
  Or fea57d4e5ebf399d2de81b5e882a40c4
  Parameter 119898b60200bcc7834af56551a0c88f
  People 58fa935abece96f6a2aeac16f6845fe2
  Send 28d2aafad88ccc1671895cb86529485e
  SendCondition dde6b5fbdab3609606a6d49674ee186c
  Set c1f42170922b3443ea424b5783f82bca
  TimeLimit 026d60b25bf41af7b4a95e86076d6c0f
  TimesUp 599c001e496166b967040765c4c7fc8f
  TotalAmount b86eb609ab784c4d51bd731741f18eb3
  TotalReached 6b8ef10f5ac1fcaae270c76f7b82c226
  Unless c573235331b9383f2ce8592f28846d00
  Until e79ecca91a56d0fec1147be4486db3c3
  When 790e695a1022b48ea3a3e121921a3368
  Withdraw 4f78ed566180045f6ae2f547ed29a830
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
2b6fe7c374de79feec517f4457a6c5ce
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ContractClass.$trModule3
                   ContractClass.$trModule1) -}
f1ba3555ab0bfa603f3bc1ee384d55d7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ContractClass.$trModule2) -}
9a9ed21e744c68d78c2b65e0752e93d0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContractClass"#) -}
d3a313d3f20e4fdbac1758594da764ea
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ContractClass.$trModule4) -}
325a62018f6ad817620641e9c51e7d48
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("FYP-0.1.0.0-DB97z4OHGdmISridARSpDG"#) -}
187273fd0ca2a2dee68fffcdea54624b
  addTo :: GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m15,
     Unfolding: InlineRule (0, True, True) Contract.AddTo -}
012863252632b396627a127fa44b3139
  allow ::
    Contract.Modifier -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m10,
     Unfolding: InlineRule (0, True, True) Contract.Allow -}
b7eed36c4835f4cd642f242ae7b7a631
  and :: Contract.Contract -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Contract.And -}
bde33dd5ae2d26330c585a6b95c777e4
  cashBackAll :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m7,
     Unfolding: InlineRule (0, True, True) Contract.CashBackAll -}
cf6afc8ca078b0feb82e9156ab4db610
  commitEther ::
    Contract.InputCondition -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m6,
     Unfolding: InlineRule (0, True, True) Contract.CommitEther -}
28d3459dc94b6e90db0e02c249bd4df4
  constructor :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m14,
     Unfolding: InlineRule (0, True, True) Contract.Constructor -}
781927787c4231815e0f4ae42a601bbc
  end :: Contract.Contract
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Contract.End -}
e6c1e2470f4794364f9de2c7ee67e0a7
  from :: GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m16,
     Unfolding: InlineRule (0, True, True) Contract.From -}
eadd38a47e039e87bf903e6709f5b4f7
  function ::
    GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Base.String) (c :: Contract.Contract) ->
                 case GHC.Base.eqString s (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> Contract.Function s c
                   GHC.Types.True -> ContractClass.function1 }) -}
5e69e19716cc63b120a48b1cae749656
  function1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.function2) -}
81eeafae6219766b139f38ff4dc3c087
  function2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ContractClass.function3) -}
f9aa0011dfe122606b60ed90e06b9e5e
  function3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Need to give function a name"#) -}
ba5a9b1b1f4bb9af47276d3d9bd68c72
  isnot :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m12,
     Unfolding: InlineRule (0, True, True) Contract.IsNot -}
06feadb2363a240033876e1751da68e1
  or :: Contract.Contract -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (0, True, True) Contract.Or -}
87a27eda10d1946b5c0375f8b7b14285
  send ::
    Contract.SendCondition -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m8,
     Unfolding: InlineRule (0, True, True) Contract.Send -}
fd12ee1189eace91e8702c09686b380d
  set :: Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.set1
                   Contract.TotalAmount -> Contract.Set Contract.TotalAmount c
                   Contract.TimeLimit -> Contract.Set Contract.TimeLimit c
                   Contract.ContractOwner -> Contract.Set Contract.ContractOwner c
                   Contract.Beneficiary -> Contract.Set Contract.Beneficiary c }) -}
89356082892f0451b28d2dcbb31b5abf
  set1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.set2) -}
4f7e29cb132e5b22f52ea494893c4827
  set2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.set3) -}
bd4dc1bc783d4c3116f8e9d06da38a03
  set3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract Set"#) -}
995558223913aa54262e6bcf07804daa
  unless ::
    Contract.CheckState -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m17,
     Unfolding: InlineRule (0, True, True) Contract.Unless -}
49f2764be0ae98ed41e8e15a9dda3840
  until ::
    Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.until1
                   Contract.Amount m -> Contract.Until wild c
                   Contract.TotalReached -> Contract.Until Contract.TotalReached c
                   Contract.TimesUp -> Contract.Until Contract.TimesUp c
                   Contract.People peo -> Contract.Until wild c }) -}
62c0c38ee76724826989b42cb29cc43a
  until1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.until2) -}
8439daee7e8f3d3246de51d1be23cad9
  until2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.until3) -}
5c663753c3fde49366ae6f5faa6d29ad
  until3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract Until"#) -}
39e8bc159535b1e87abbde23e8f58441
  when ::
    Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.when1
                   Contract.Amount m -> Contract.When wild c
                   Contract.TotalReached -> Contract.When Contract.TotalReached c
                   Contract.TimesUp -> Contract.When Contract.TimesUp c
                   Contract.People peo -> Contract.When wild c
                   Contract.TotalAmount -> Contract.When Contract.TotalAmount c }) -}
d3394d802e7ee399e69a0e34b4b89b76
  when1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.when2) -}
273dce595139fa390bee14848ac2fff9
  when2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.when3) -}
f4c6c76f7cc8a83ee0c638fd5f483758
  when3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract When"#) -}
eff0e4adddef5a46548448a9e3a50d60
  withdraw :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m9,
     Unfolding: InlineRule (0, True, True) Contract.Withdraw -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

