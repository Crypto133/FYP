
==================== FINAL INTERFACE ====================
2019-04-03 19:01:42.0733508 UTC

interface FYP-0.1.0.0-DB97z4OHGdmISridARSpDG:ContractClass 8022
  interface hash: b05a27ba05c3a992f9038389e9335784
  ABI hash: 05cba93360fc1b4e99f4dda6413fd294
  export-list hash: f8618b225029ed238f0e2e77b83b442c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 116d747c6d2286eaf4ade378327fec2c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ContractClass.addTo
  ContractClass.allow
  ContractClass.and
  ContractClass.cashBackAll
  ContractClass.commitEther
  ContractClass.constructor
  ContractClass.end
  ContractClass.from
  ContractClass.function
  ContractClass.isnot
  ContractClass.or
  ContractClass.send
  ContractClass.set
  ContractClass.unless
  ContractClass.until
  ContractClass.when
  ContractClass.withdraw
module dependencies: Contract
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  Contract aaab57092ce6d0462b266ee87887b189
  exports: 18280b7c07d72ea56b802b842c8c508a
  AddTo f8a6eb9a21f4ff519be304dfb9e616ed
  Allow 4bcf998b5616a6244a5da682482ecb80
  Amount 341537ce0e00a778849a9c7693f44f64
  And 7e389947cdaf7e9082888065e595864e
  Beneficiary eb11561124df885f4b3461cdb529790f
  CashBackAll 2d1f2f99b613833bc11c4e4c5f0cfb66
  CheckState 64f0a15067a74817abca84a21b5412ad
  CommitEther 0d03bba4243efc9d4d9f7455424356ba
  Constructor a194b2183d57d3e500d8bc5b6ffdb82f
  Contract 287e4fefef54359a2ef6640bd806c459
  ContractOwner 4cc38e0c26ad3eff8ac162cc56cf12ea
  End 0719f5aa24d0869f683a0681870a0300
  Error 62f034ad40e7c557f73de45d8c867cd2
  From e4e07f0c078e5eeabd4f8d478315871d
  Function d013115f82f58820e9684353a130163f
  InputCondition b24257cac3f4075ae4e1069ca66664c3
  IsNot ec1f7280f9d2f9cb83ca6207bf925d5b
  Modifier 571750549f645a1584f0a6d855eab0b9
  Or 1b967add20fc4a1394133889a5df7fa4
  Parameter 119898b60200bcc7834af56551a0c88f
  People 58fa935abece96f6a2aeac16f6845fe2
  Send 5c21d0d64f6594af25a398081624747c
  SendCondition dde6b5fbdab3609606a6d49674ee186c
  Set 517a19c5752254154d838f984f7e575c
  TimeLimit 026d60b25bf41af7b4a95e86076d6c0f
  TimesUp 599c001e496166b967040765c4c7fc8f
  TotalAmount b86eb609ab784c4d51bd731741f18eb3
  TotalReached 6b8ef10f5ac1fcaae270c76f7b82c226
  Unless 416f1226644b4b57a375517a044c6355
  Until 20a91bca68b0897f6bcf9ca312769a25
  When fa475a06038622bbaa39698ae3663c79
  Withdraw 84bb4f90eebe36456f1bed17322c50a5
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
2b6fe7c374de79feec517f4457a6c5ce
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ContractClass.$trModule3
                   ContractClass.$trModule1) -}
f1ba3555ab0bfa603f3bc1ee384d55d7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ContractClass.$trModule2) -}
9a9ed21e744c68d78c2b65e0752e93d0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContractClass"#) -}
d3a313d3f20e4fdbac1758594da764ea
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ContractClass.$trModule4) -}
325a62018f6ad817620641e9c51e7d48
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("FYP-0.1.0.0-DB97z4OHGdmISridARSpDG"#) -}
98821ddb27d569efc156c299e202252e
  addTo :: GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m15,
     Unfolding: InlineRule (0, True, True) Contract.AddTo -}
c8b5165ac257d5e514eccc30033f270a
  allow ::
    Contract.Modifier -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m10,
     Unfolding: InlineRule (0, True, True) Contract.Allow -}
dbdc08f5cb33262f525e19835c26b099
  and :: Contract.Contract -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Contract.And -}
7b2ef7e7274b138b0aab2e60b4bd4c1b
  cashBackAll :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m7,
     Unfolding: InlineRule (0, True, True) Contract.CashBackAll -}
b13c109c1640abb065f5fe09ea527260
  commitEther ::
    Contract.InputCondition -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m6,
     Unfolding: InlineRule (0, True, True) Contract.CommitEther -}
383de2ac1e04f79b6e821e759c9d5acf
  constructor :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m14,
     Unfolding: InlineRule (0, True, True) Contract.Constructor -}
391f7494902fdbbf30dfb5d73117a147
  end :: Contract.Contract
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Contract.End -}
4d04723c283fcd7fcc0aaa8348856624
  from :: GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m16,
     Unfolding: InlineRule (0, True, True) Contract.From -}
698ba23e57da561885c1d1d5e28cc3d2
  function ::
    GHC.Base.String -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Base.String) (c :: Contract.Contract) ->
                 case GHC.Base.eqString s (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> Contract.Function s c
                   GHC.Types.True -> ContractClass.function1 }) -}
bc96d28d2a1ca251e0927a4a1fbc5d9d
  function1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.function2) -}
81eeafae6219766b139f38ff4dc3c087
  function2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ContractClass.function3) -}
f9aa0011dfe122606b60ed90e06b9e5e
  function3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Need to give function a name"#) -}
1606ca2617dd638539945e8f52721597
  isnot :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m12,
     Unfolding: InlineRule (0, True, True) Contract.IsNot -}
ab246c648063184fccb245f4275264d2
  or :: Contract.Contract -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (0, True, True) Contract.Or -}
22e62acde99053180b9481729fbed520
  send ::
    Contract.SendCondition -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m8,
     Unfolding: InlineRule (0, True, True) Contract.Send -}
6b3b8c82feb082eef4e645d11a1266f6
  set :: Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.set1
                   Contract.TotalAmount -> Contract.Set Contract.TotalAmount c
                   Contract.TimeLimit -> Contract.Set Contract.TimeLimit c
                   Contract.ContractOwner -> Contract.Set Contract.ContractOwner c
                   Contract.Beneficiary -> Contract.Set Contract.Beneficiary c }) -}
98364de6840652f67b90f90fce9dfbb2
  set1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.set2) -}
4f7e29cb132e5b22f52ea494893c4827
  set2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.set3) -}
bd4dc1bc783d4c3116f8e9d06da38a03
  set3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract Set"#) -}
83cdf971a943dcac9a8daa247ca50e83
  unless ::
    Contract.CheckState -> Contract.Contract -> Contract.Contract
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m17,
     Unfolding: InlineRule (0, True, True) Contract.Unless -}
fa4f477cdce14f169d00733b8cdbf7a1
  until ::
    Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.until1
                   Contract.Amount m -> Contract.Until wild c
                   Contract.TotalReached -> Contract.Until Contract.TotalReached c
                   Contract.TimesUp -> Contract.Until Contract.TimesUp c
                   Contract.People peo -> Contract.Until wild c }) -}
800ab2e0d2711c6a4a9da6230b751fed
  until1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.until2) -}
8439daee7e8f3d3246de51d1be23cad9
  until2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.until3) -}
5c663753c3fde49366ae6f5faa6d29ad
  until3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract Until"#) -}
afacd71dde8a8af1cb29ce7b95b714fe
  when ::
    Contract.Parameter -> Contract.Contract -> Contract.Contract
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (p :: Contract.Parameter) (c :: Contract.Contract) ->
                 case p of wild {
                   DEFAULT -> ContractClass.when1
                   Contract.Amount m -> Contract.When wild c
                   Contract.TotalReached -> Contract.When Contract.TotalReached c
                   Contract.TimesUp -> Contract.When Contract.TimesUp c
                   Contract.People peo -> Contract.When wild c
                   Contract.TotalAmount -> Contract.When Contract.TotalAmount c }) -}
da41312b0f4b917dff0f1e54c39eacbb
  when1 :: Contract.Contract
  {- Strictness: m18,
     Unfolding: (Contract.Error ContractClass.when2) -}
273dce595139fa390bee14848ac2fff9
  when2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ContractClass.when3) -}
f4c6c76f7cc8a83ee0c638fd5f483758
  when3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incorrect Parameter for Contract When"#) -}
e3e2b9f652565cd2c723aa115f8ca80c
  withdraw :: Contract.Contract -> Contract.Contract
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m9,
     Unfolding: InlineRule (0, True, True) Contract.Withdraw -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

